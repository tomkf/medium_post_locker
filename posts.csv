le-wagon/whats-your-goal-for-learning-to-code-8231e239ede,What‚Äôs your goal for learning to¬†code?,"This very scholar approach is terribly frustrating when it comes to programming or hands-on skills. Here is what happens when you start applying it:

Seven years later, I am running Le Wagon, one of the most recognised coding bootcamps in the world, present in 27 cities, with an amazing community of 2000+ alumni. So it begs the question.

At some point, my friend Mathieu, one of the initial co-founders of Le Wagon, asked me to code with him on side-projects. This guy was always learning stuff with a very clear objective in mind. At that time, Mathieu was for instance trying to collect data from mobile text messages to build interesting visualisations (working on TxTo).

So I gathered a bit of my scattered programming knowledge and started working on side projects with Mathieu. From then on, I learned much more and much faster. Most importantly my learning goals switched! And I realised one thing. You don‚Äôt learn to code to play with the latest technology, grasp difficult concepts rewarding for your ego, or learn weird syntax and shine at cocktail parties.

Obviously many developers like Le Wagon‚Äôs CTO Sebastien have been driven by this philosophy since their childhood. But for me as a coding beginner without a real goal or passion, that was an incredible discovery. Since this day, I‚Äôve decided to focus on teaching programming the best way I can to make people build useful products and solve problems. That‚Äôs where Le Wagon comes from.

Nowadays, when I read all these posts about ‚ÄúWhich programming language is the best?‚Äù, ‚ÄúWhich technology you must start learning?‚Äù or ‚ÄúWhich tech program will get you a 6-digit salary?‚Äù, I just feel this is introducing hype, FOMO, rewards, and wrong incentives for coding beginners.

So here are some insights I wish I had when I started learning to code. Maybe that would have accelerated the switch of my ‚Äùlearning goals‚Äù.

Programming, data-science, web-development, UX design, product management, growth marketing, AI, machine-learning...

Python, ruby, PHP, JavaScript, C++, Rails, node.js, HTML, CSS, React.js, d3.js, etc‚Ä¶

edX, Coursera, Freecodecamp, Codecademy, Treehouse, Udemy, Lynda, Udacity, not to mention hundreds of coding bootcamps worldwide

A lifetime is not enough to learn all this. So it‚Äôs just normal if you feel lost (even anxious üò±üò±üò±) and ask yourself questions like:

Well, maybe you‚Äôre just like me when I started to learn programming. You haven‚Äôt set the right goals for yourself. You‚Äôre distracted by hype, FOMO, rewards. So take a step back. Forget ‚Äúwhat‚Äôs best‚Äù. Forget ‚Äúwhat‚Äôs hype‚Äù.

Whether you go the data, the product, or the engineer way, there is no shortcut.

For instance, if you focus on web-development, learn to build a robust web application applying good coding practices, whatever the underlying language you choose (ruby, python, javascript, etc‚Ä¶). Learn this honestly before you decide if you want to build a 10 million user real-time mobile game or become a React.js expert because a friend told you it‚Äôs swag üòé.

For instance, let me describe the way we articulate the first weeks of our coding bootcamp at Le Wagon:

For us, this is the only honest approach in teaching programming and web-development. We could start by making students code small HTML/CSS websites that they could show to their friends when they come back home. Of course, this might be a more immediate reward for them.

Well, we are not at school anymore. Students are not here to get immediate rewards but to learn to build things. Even if they find this approach hard and sometimes frustrating, eventually they‚Äôll realise this and thank us at the end of the bootcamp for teaching them core concepts in a structured way.

And after developing their final project, they know they can build products with solid foundations, from which they will keep learning.

That‚Äôs the only reward that really matters at the end.",Boris Paillard,true
le-wagon/teaching-programming-is-hard-f4ad74e702d0,Teaching Programming is¬†Hard,"The traditional education system hasn‚Äôt found the recipe yet to teach technology properly. In fact, what universities offer to students strongly differs from what the industry is looking for, especially in high moving fields like web development.

While traditional schools struggle to re-invent themselves on these new topics, the tech education market is booming. Hundreds of tutorials and resources are posted on edX, Coursera, Codecademy, Treehouse, Udemy, Lynda, etc‚Ä¶ Udacity is partnering with big companies like Google and Facebook to build joint ‚Äúnano-degrees‚Äù. Actors like General Assembly are raising millions to become global players of the on-site tech education. The coding bootcamp market is exploding and getting crowded. In the US and Canada alone, the number of coding bootcamps has grown from 67 to 91 from 2015 to 2016 (+35% in 1 year).

When a market is quickly expanding like this, it‚Äôs generally hard to separate the wheat from the chaff. Especially with sensationalized marketing campaigns and over-promising messages like ‚Äúlearn to build an iOS application in one week‚Äù. Lots of actors pretend to deliver the same value and to offer a 99% job placement rate, which (of course) is not true. Obama states every kid should learn to code while media like TechCrunch sometimes take the opposite position to balance the debate.

In my opinion, this all comes down to a single question:

It turns out learning technical subjects is just like learning anything else: great teachers make all the difference. Does this surprise you? (It shouldn‚Äôt). Take the course on machine learning by Andrew Ng that launched Coursera back in 2012. To this day, data-scientists recommend the course as the best introduction to machine-learning out there. I am sure that behind the scenes, a lot of time and effort went into the design and execution of this course. Still, it‚Äôs the work of one teacher (or a few at least). Education is very scalable since one single teacher can have an impact on millions of students. But scaling does not necessarily requires money or big tech disruption, it requires talent, time and passion.

Maybe one day, neuroscience will be so advanced that you‚Äôll be able to learn something new in a few minutes. Right now, this is only science-fiction. The educational process today is formed of experiences that are broadly defined by the curriculum, which means the journey you experience as a student to learn new concepts and skills. This journey is about examples, structure, challenges, rhythm, entertainment, not just content.

I had a terrible experience as a student when I first learned programming at school. Let me describe to you the typical C++ (programming language) course I had during my studies:

During this course, we never saw a teacher open his text editor and actually code something. We never discussed how you build softwares with code. We never used APIs or scrape information from websites to play with real-life data. For me, code was just boring concepts without real purpose. None of us really cared.

When I started coding tech products with my friend Mathieu (one of the initial co-founders of Le Wagon) I just realised how fascinating code is:

I had found my new passion. I discovered a thrilling, engaging world that actually required my whole brain, one that required a diverse set of skills that didn‚Äôt at all resemble my C++ class. So, it begs the question:

The answer is simple. A great student‚Äôs experience requires lots of iterations. Traditional schools don‚Äôt have the right setup for that.

Ask any conscientious teacher to give an opinion on a course he designed five years ago. Well, he will always tell you it needs a serious refresh. And it‚Äôs not by putting this course online on Coursera or edX that it becomes great all of a sudden. So why do traditional schools struggle to iterate on their curriculum when it‚Äôs their core product?

At Le Wagon, and in other coding bootcamps, we have a different setup to iterate on our curriculum:

Since the beginning, we made major iterations on our curriculum and platforms more than 15 times (4 times every year). We tested and implemented lots of new ideas:

We tested tons of new features in the curriculum but we also iterated a lot on the content itself of our lectures and exercises. More than 2,105 times during the last 3 years to be precise üò±üò±üò±. You can see that on the Github repository hosting all our exercises.

Also, because our students pay for their education, our only key metric is our NPS per session (if you don‚Äôt know what NPS is about, you can read this article). Here are Le Wagon‚Äôs NPS for all the Paris batches of 2016‚Äì2017.

Having a NPS above 70 is our only priority. We don‚Äôt want our students to be satisfied about our program, we want them to go through a life-changing learning experience. That‚Äôs what a curriculum should be about, experience.

I come from a great engineering school in France and I‚Äôm proud of it. Even if they did a really poor job in teaching me how to program, I still think the school was great on many other topics and taught me how to learn. However, there is still one thing I don‚Äôt get:

There are so many inspiring alumni from my school‚Äôs network. Hundreds of engineers who have invented innovative services and products, hundreds of entrepreneurs who have amazing stories to tell. So why the only ‚Äúinspirational‚Äù talks I had as a student were given my non-inspirational bankers and consultants?

If you look at Le Wagon‚Äôs Youtube channel, you‚Äôll see that we organised more than 100 talks world-wide with first-class entrepreneurs and CTOs (from Github, Criteo, Devialet, Trainline, Doctolib, etc‚Ä¶). These talks are nearly as important as the rest of the curriculum. For us, inspiration is part of the education we provide to our students.

Very few people really know what they want to do. For most of us, we need to be inspired and hear stories to ‚Äúdiscover our calling‚Äù.

Not only you need inspiration as an ‚Äúadult student‚Äù but I‚Äôm also convinced that vocation comes out of expertise. To know if you really like something, you have to become an expert (or at least a junior expert üòä) in that specific discipline.

When I was at school, I was not a big fan of chemistry for instance. But who knows, maybe it would have become a true passion if I had gone through a 2-month intensive chemistry bootcamp with great teachers. When you reach expertise, you become autonomous and you start being creative. It‚Äôs only at this point when you can decide whether or not you really like something.

For most of us, it‚Äôs easy to know what we don‚Äôt like, but what‚Äôs harder is to articulate what we do like. For that, we need both inspiration and expertise. That‚Äôs why the ‚Äúbootcamp‚Äù education model is so interesting and applies so well to concrete skills like web-development. Because it immerses yourself in one discipline for months until you reach the expertise necessary to decide whether or not you want to continue doing that.

Behind every great curriculum is a great teacher. And, don‚Äôt expect to nail it the first time, instead create systems that foster feedback and iterations for continuous improvement:

Thanks for reading. I‚Äôd love to hear your thoughts and opinions in the comments section, whether your are a teacher, a student, a bootcamp alumni, or just passionate about education like we are at Le Wagon.",Boris Paillard,true
le-wagon/this-is-what-a-developer-looks-like-379c261db24d,This is what a developer looks¬†like,"Lola likes reading and wearing dad hats. But above all, Lola loves coding. She loves it so much that she has made it her passion, and ultimately, her job.

Lola studied translation, linguistics and literature at university. She then worked as a freelance translator for a while, and ended up working in marketing, which she didn‚Äôt really enjoy. One day, she decided to learn to code. As two of her friends had done Le Wagon and loved it, she quit her job and joined the next Paris batch.

Her studying at Le Wagon was just the beginning of her coding journey. As she had almost finished the bootcamp, one of her teachers asked her if she would like to become a Teaching Assistant. She immediately said yes.

I have been working in the tech space for 4 years, so I‚Äôm used to seeing few women around, especially in technical teams. When I joined Le Wagon a few weeks ago, I immediately noticed amazing and passionate women developers around me. Not being a developer myself (though I have already considered it), I asked them how they felt about coding, and why they thought so few women were interested in it.

So I asked Lola what she loved about coding. Her answer is compelling üòç

Beautiful, isn‚Äôt it? And besides being beautiful, it makes the perfect intro to a very important point.

It may well be that you related to what Lola depicted above. You may have told yourself ‚Äúwow, this seems fantastic, this stuff was made for me. I need to start coding right away‚Äù. And maybe you didn‚Äôt. What I‚Äôm certain about is that it has nothing to do with your being a üë®‚Äçüéì or a üë©‚Äçüéì.

To make sure that I got it right, I asked other girls what they loved about coding. Girls working at Le Wagon: developers, teachers, teaching assistants.

This is what Sandrine, developer and teacher at Le Wagon, told me.

‚ÄúI love coding for a ton of different reasons: I love the fact that I can work on a problem and see immediate results‚Ää‚Äî‚Ääpositive or negative. It requires you to dive deep into a problem, there is no room for bullshit or half-assed solutions.

The challenge is also what Cecile, part-time Le Wagon teacher, part-time freelance developer, enjoys in her job: ‚Äúbeing a developer means being constantly challenged, every day‚Äù. There is something else that she is fond of: bringing to life projects that she cares about.

‚ÄúWhat I love about web development is that you can bring your expertise to every sector that you like. I used to work for an e-commerce fashion website, then for an auction platform, now I work with Fizzer, an awesome app created by two Le Wagon alumni. I can help bring to life all the projects I believe in.‚Äù

Intellectual challenge ‚úÖ Constant learning ‚úÖ Daily victories ‚úÖ Are these especially male or female stuff?

Karine used to be a designer. She did Le Wagon, and now, she is a full-time developer, teacher and co-founder of web agency Poulpe.

Freedom ‚úÖ Creativity ‚úÖ Empowerment ‚úÖ Again, especially male or female stuff?

At Le Wagon, bringing more women to code is a real challenge. Slowly but surely, we‚Äôre getting there, some cities being more successful than others in that matter üò¨

Coding should appeal to girls and boys equally, right? But the reality is quite different.

Of course, these figures are biased: percentages vary from batch to batch. For instance, Barcelona has had 27% female students since it launched, and this latest batch is not representative of the city‚Äôs diversity efforts. But on the whole, among the latest Le Wagon batches across the world‚Ää‚Äî‚Ääand throughout Le Wagon‚Äôs history‚Ää‚Äî‚Ääwomen have represented 25% of the students on average. We could be satisfied by this figure. After all, it is still higher than the average percentage of women in many companies‚Äô tech teams.

We receive more and more applications from women, but there are still too few of them. We feel sorry that so few women feel like coding is for them. We feel sorry that so few women have the opportunity to use this very empowering and fulfilling tool that is web development üí•

If coding is a matter of ‚Äúhard work, drive, self-confidence and a hunger for learning‚Äù (I took that from Sandrine), then why is the field lacking women? And why do we associate the word ‚Äúdeveloper‚Äù to a grumpy guy instead of a smiling girl? üíÉ

For Alice, developer and teacher at Le Wagon Berlin, many women don‚Äôt even think that coding could be a choice for them. It seems that the good old developer image is deeply rooted in our collective unconscious.

But hey! Alice also thinks that this pattern is quickly evolving, and that it is partly due to the nature of the profession: ‚ÄúOn the technological side, we constantly need to evolve, so on the social side that happens as well. Change can be very, very fast.‚Äù

üí™üí™üí™

So, close your eyes and tell me: what does a developer look like now?",Rebecca Menat,false
